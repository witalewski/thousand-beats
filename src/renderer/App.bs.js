// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Chime from "./Chime.bs.js";
import * as CssJs from "bs-css-emotion/src/CssJs.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Counter from "./Counter.bs.js";
import * as Controls from "./Controls.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

import setBackgroundPhoto from './setBackgroundPhoto.js';
  setBackgroundPhoto();
;

CssJs.$$global("html, body", [
      CssJs.margin("zero"),
      CssJs.padding("zero"),
      CssJs.unsafe("userSelect", "none")
    ]);

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("App"),
      CssJs.display("flex"),
      CssJs.flexDirection("column"),
      CssJs.unsafe("alignItems", "center"),
      CssJs.unsafe("justifyContent", "center"),
      CssJs.unsafe("fontFamily", "\"Lato\""),
      CssJs.width({
            NAME: "pxFloat",
            VAL: 100
          }),
      CssJs.height({
            NAME: "pxFloat",
            VAL: 100
          }),
      CssJs.borderRadius({
            NAME: "percent",
            VAL: 50
          }),
      CssJs.overflow("hidden"),
      CssJs.backgroundColor({
            NAME: "hex",
            VAL: "303030"
          }),
      CssJs.unsafe("backgroundBlendMode", "overlay"),
      CssJs.backgroundSize("cover"),
      CssJs.color({
            NAME: "hex",
            VAL: "f6c177"
          })
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var App = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

var deleteProp$1 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$1(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$1 = CssJs.style([
      CssJs.label("Spacer"),
      CssJs.flexBasis({
            NAME: "percent",
            VAL: 33
          })
    ]);

function make$1(props) {
  var className = styles$1 + getOrEmpty$1(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$1(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Spacer = {
  deleteProp: deleteProp$1,
  getOrEmpty: getOrEmpty$1,
  styles: styles$1,
  make: make$1
};

var playSign = "&#9658;";

var pauseSign = "||";

function initializeIntervalState(param) {
  
}

var intervalLastRunAt = {
  contents: undefined
};

function App$1(Props) {
  var match = React.useState(function () {
        
      });
  var setIntervalId = match[1];
  var intervalId = match[0];
  var match$1 = React.useState(function () {
        return 2571428;
      });
  var setTimeRemaining = match$1[1];
  var timeRemaining = match$1[0];
  var match$2 = React.useState(function () {
        return playSign;
      });
  var setStartButtonLabel = match$2[1];
  var runInterval = function (param) {
    var now = Date.now() | 0;
    var x = intervalLastRunAt.contents;
    var timeToSubtract = x !== undefined ? now - x | 0 : 100;
    Curry._1(setTimeRemaining, (function (timeRemaining) {
            return timeRemaining - timeToSubtract | 0;
          }));
    intervalLastRunAt.contents = now;
    
  };
  var pauseTimer = function (id) {
    clearInterval(id);
    Curry._1(setIntervalId, (function (param) {
            
          }));
    Curry._1(setStartButtonLabel, (function (param) {
            return playSign;
          }));
    intervalLastRunAt.contents = undefined;
    
  };
  var resetTimer = function (param) {
    Belt_Option.forEach(intervalId, pauseTimer);
    return Curry._1(setTimeRemaining, (function (param) {
                  return 2571428;
                }));
  };
  var onToggle = function (param) {
    if (intervalId !== undefined) {
      return pauseTimer(Caml_option.valFromOption(intervalId));
    } else {
      Curry._1(setIntervalId, (function (param) {
              return Caml_option.some(setInterval(runInterval, 100));
            }));
      return Curry._1(setStartButtonLabel, (function (param) {
                    return pauseSign;
                  }));
    }
  };
  React.useEffect((function () {
          if (timeRemaining < 0) {
            resetTimer(undefined);
          }
          
        }), [timeRemaining]);
  var timeRemainingRatio = timeRemaining / 2571428;
  return React.createElement(make, {
              children: null,
              className: "app"
            }, React.createElement(make$1, {}), React.createElement(Counter.make, {
                  timeRemainingRatio: timeRemainingRatio
                }), React.createElement(Controls.make, {
                  onToggle: onToggle,
                  resetTimer: resetTimer,
                  labelHtml: match$2[0]
                }), React.createElement(Chime.make, {
                  timeRemaining: timeRemaining
                }));
}

var workingTimePerHour = 2571428;

var make$2 = App$1;

export {
  App ,
  Spacer ,
  workingTimePerHour ,
  playSign ,
  pauseSign ,
  initializeIntervalState ,
  intervalLastRunAt ,
  make$2 as make,
  
}
/*  Not a pure module */
